@model IEnumerable<Categoria>

@{
    ViewData["Title"] = "Categorias";
}

<!-- DataTables CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">Categorias</h2>
        <p class="text-muted mb-0">Gerencie as categorias dos seus gastos</p>
    </div>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#categoriaModal" onclick="openCreateModal()">
        <i class="bi bi-plus-circle me-2"></i>Nova Categoria
    </button>
</div>

<div class="card border-0 shadow-sm">
    <div class="card-body">
        <table id="categoriasTable" class="table table-hover">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th>Cor</th>
                    <th>Gastos</th>
                    <th width="120">Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var categoria in Model)
                {
                    <tr>
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="me-2 rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 32px; height: 32px; background-color: @categoria.Cor;">
                                    <i class="bi bi-@categoria.Icone.ToLower() text-white small"></i>
                                </div>
                                <span class="fw-semibold">@categoria.Nome</span>
                            </div>
                        </td>
                        <td>
                            <span class="badge rounded-pill" style="background-color: @categoria.Cor; color: white;">
                                @categoria.Cor
                            </span>
                        </td>
                        <td>
                            <span class="badge bg-info">
                                @(categoria.Gastos?.Count ?? 0)
                            </span>
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button type="button" class="btn btn-outline-secondary" 
                                        data-bs-toggle="modal" data-bs-target="#categoriaModal" 
                                        onclick="openEditModal(@categoria.Id, '@categoria.Nome', '@categoria.Cor', '@categoria.Icone')"
                                        title="Editar">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button type="button" class="btn btn-outline-danger" 
                                        data-bs-toggle="modal" data-bs-target="#categoriaModal" 
                                        onclick="openDeleteModal(@categoria.Id, '@categoria.Nome', '@categoria.Cor', '@categoria.Icone')"
                                        title="Excluir">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal Reutilizável -->
<div class="modal fade" id="categoriaModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Modal Categoria</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Conteúdo será carregado dinamicamente -->
            </div>
        </div>
    </div>
</div>

<!-- DataTables JS -->
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>

<script>
    // Inicializar DataTables
    $(document).ready(function() {
        $('#categoriasTable').DataTable({
            language: {
                url: 'https://cdn.datatables.net/plug-ins/1.13.6/i18n/pt-BR.json'
            },
            pageLength: 10,
            order: [[0, 'asc']],
            columnDefs: [
                { orderable: false, targets: [3] }
            ]
        });
    });

    // Funções para abrir diferentes modais
    function openCreateModal() {
        document.getElementById('modalTitle').textContent = 'Nova Categoria';
        document.getElementById('modalBody').innerHTML = `
            <form id="categoriaForm" onsubmit="saveCategoria(event)">
                <div class="mb-3">
                    <label class="form-label fw-semibold">Nome</label>
                    <input type="text" class="form-control" name="Nome" required placeholder="Ex: Alimentação">
                </div>
                <div class="mb-3">
                    <label class="form-label fw-semibold">Cor</label>
                    <div class="input-group">
                        <input type="color" class="form-control form-control-color" name="Cor" value="#FF6B6B">
                        <input type="text" class="form-control" name="CorText" value="#FF6B6B" placeholder="#000000">
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-semibold">Ícone</label>
                    <div class="mb-2">
                        <input type="text" class="form-control" id="iconSearch" placeholder="Buscar ícone..." onkeyup="filterIcons()">
                    </div>
                    <div class="icon-grid" style="max-height: 200px; overflow-y: auto;">
                        <div class="row g-2" id="iconGrid">
                            ${generateIconOptions()}
                        </div>
                    </div>
                </div>
                <input type="hidden" name="Icone" id="selectedIcon" value="UtensilsCrossed">
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-check-circle me-2"></i>Salvar
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-2"></i>Cancelar
                    </button>
                </div>
            </form>
        `;
        
        setupColorPicker();
        setupIconSelection();
    }

    function openEditModal(id, nome, cor, icone) {
        document.getElementById('modalTitle').textContent = 'Editar Categoria';
        document.getElementById('modalBody').innerHTML = `
            <form id="categoriaForm" onsubmit="updateCategoria(event, ${id})">
                <input type="hidden" name="Id" value="${id}">
                <div class="mb-3">
                    <label class="form-label fw-semibold">Nome</label>
                    <input type="text" class="form-control" name="Nome" value="${nome}" required>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-semibold">Cor</label>
                    <div class="input-group">
                        <input type="color" class="form-control form-control-color" name="Cor" value="${cor}">
                        <input type="text" class="form-control" name="CorText" value="${cor}">
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-semibold">Ícone</label>
                    <div class="mb-2">
                        <input type="text" class="form-control" id="iconSearch" placeholder="Buscar ícone..." onkeyup="filterIcons()">
                    </div>
                    <div class="icon-grid" style="max-height: 200px; overflow-y: auto;">
                        <div class="row g-2" id="iconGrid">
                            ${generateIconOptions(icone)}
                        </div>
                    </div>
                </div>
                <input type="hidden" name="Icone" id="selectedIcon" value="${icone}">
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-check-circle me-2"></i>Salvar Alterações
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-2"></i>Cancelar
                    </button>
                </div>
            </form>
        `;
        
        setupColorPicker();
        setupIconSelection();
    }

    function openDeleteModal(id, nome, cor, icone) {
        document.getElementById('modalTitle').textContent = 'Excluir Categoria';
        document.getElementById('modalBody').innerHTML = `
            <div class="alert alert-danger">
                <div class="d-flex align-items-center">
                    <i class="bi bi-exclamation-triangle-fill me-3" style="font-size: 1.5rem;"></i>
                    <div>
                        <h6 class="alert-heading mb-1">Atenção!</h6>
                        <p class="mb-0">Esta ação não pode ser desfeita.</p>
                    </div>
                </div>
            </div>
            
            <div class="text-center mb-4">
                <div class="rounded-circle d-flex align-items-center justify-content-center mx-auto mb-3" 
                     style="width: 60px; height: 60px; background-color: ${cor};">
                    <i class="bi bi-${icone.toLowerCase()} text-white fs-4"></i>
                </div>
                <h5>Excluir "${nome}"?</h5>
            </div>
            
            <form id="deleteForm" onsubmit="deleteCategoria(event, ${id})">
                <div class="d-flex gap-2 justify-content-center">
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash me-2"></i>Sim, Excluir
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-2"></i>Cancelar
                    </button>
                </div>
            </form>
        `;
    }

    function generateIconOptions(selectedIcon = 'UtensilsCrossed') {
        const iconCategories = {
            'Alimentação': [
                { name: 'UtensilsCrossed', emoji: '🍽️', label: 'Restaurante' },
                { name: 'Coffee', emoji: '☕', label: 'Café' },
                { name: 'Pizza', emoji: '🍕', label: 'Pizza' },
                { name: 'Cake', emoji: '🎂', label: 'Sobremesa' },
                { name: 'ShoppingBag', emoji: '🛒', label: 'Mercado' },
                { name: 'Apple', emoji: '🍎', label: 'Frutas' }
            ],
            'Transporte': [
                { name: 'Car', emoji: '🚗', label: 'Carro' },
                { name: 'Bus', emoji: '🚌', label: 'Ônibus' },
                { name: 'Train', emoji: '🚆', label: 'Trem' },
                { name: 'Bike', emoji: '🚲', label: 'Bicicleta' },
                { name: 'Plane', emoji: '✈️', label: 'Avião' },
                { name: 'Taxi', emoji: '🚕', label: 'Táxi' },
                { name: 'Fuel', emoji: '⛽', label: 'Combustível' }
            ],
            'Casa': [
                { name: 'Home', emoji: '🏠', label: 'Casa' },
                { name: 'Zap', emoji: '⚡', label: 'Energia' },
                { name: 'Droplets', emoji: '💧', label: 'Água' },
                { name: 'Wifi', emoji: '📶', label: 'Internet' },
                { name: 'Phone', emoji: '📞', label: 'Telefone' },
                { name: 'Wrench', emoji: '🔧', label: 'Reparo' }
            ],
            'Saúde': [
                { name: 'Heart', emoji: '❤️', label: 'Saúde' },
                { name: 'Pill', emoji: '💊', label: 'Remédio' },
                { name: 'Stethoscope', emoji: '🩺', label: 'Médico' },
                { name: 'Dumbbell', emoji: '🏋️', label: 'Academia' },
                { name: 'Tooth', emoji: '🦷', label: 'Dentista' }
            ],
            'Educação': [
                { name: 'GraduationCap', emoji: '🎓', label: 'Educação' },
                { name: 'Book', emoji: '📚', label: 'Livros' },
                { name: 'Laptop', emoji: '💻', label: 'Curso Online' },
                { name: 'Pencil', emoji: '✏️', label: 'Material' }
            ],
            'Lazer': [
                { name: 'Gamepad2', emoji: '🎮', label: 'Games' },
                { name: 'Popcorn', emoji: '🍿', label: 'Cinema' },
                { name: 'Music', emoji: '🎵', label: 'Música' },
                { name: 'Camera', emoji: '📷', label: 'Fotografia' },
                { name: 'MapPin', emoji: '📍', label: 'Viagem' }
            ],
            'Compras': [
                { name: 'ShoppingCart', emoji: '🛒', label: 'Compras' },
                { name: 'Shirt', emoji: '👕', label: 'Roupa' },
                { name: 'Gift', emoji: '🎁', label: 'Presente' },
                { name: 'Gem', emoji: '💎', label: 'Luxo' }
            ],
            'Trabalho': [
                { name: 'Briefcase', emoji: '💼', label: 'Trabalho' },
                { name: 'DollarSign', emoji: '💰', label: 'Salário' },
                { name: 'FileText', emoji: '📄', label: 'Documento' },
                { name: 'Target', emoji: '🎯', label: 'Meta' }
            ],
            'Outros': [
                { name: 'CreditCard', emoji: '💳', label: 'Cartão' },
                { name: 'PiggyBank', emoji: '🐷', label: 'Poupança' },
                { name: 'TrendingUp', emoji: '📈', label: 'Investimento' },
                { name: 'AlertTriangle', emoji: '⚠️', label: 'Emergência' },
                { name: 'Calendar', emoji: '📅', label: 'Agendamento' }
            ]
        };
        
        let iconsHtml = '';
        Object.entries(iconCategories).forEach(([category, icons]) => {
            iconsHtml += `
                <div class="col-12 mb-2">
                    <small class="text-muted fw-bold">${category}</small>
                </div>
            `;
            
            icons.forEach(icon => {
                iconsHtml += `
                    <div class="col-3 col-md-2">
                        <div class="icon-option text-center p-2 border rounded cursor-pointer ${icon.name === selectedIcon ? 'bg-primary text-white' : 'bg-light'}" 
                             data-icon="${icon.name}" 
                             data-search="${icon.label.toLowerCase()} ${category.toLowerCase()}" 
                             onclick="selectIcon('${icon.name}')" 
                             title="${icon.label}">
                            <div class="fs-4 mb-1">${icon.emoji}</div>
                            <small class="d-block text-truncate" style="font-size: 0.7rem;">${icon.label}</small>
                        </div>
                    </div>
                `;
            });
        });
        
        return iconsHtml;
    }

    function selectIcon(iconName) {
        // Remove seleção anterior
        document.querySelectorAll('.icon-option').forEach(el => {
            el.classList.remove('bg-primary', 'text-white');
            el.classList.add('bg-light');
        });
        
        // Adiciona seleção atual
        const selectedElement = document.querySelector(`[data-icon="${iconName}"]`);
        selectedElement.classList.remove('bg-light');
        selectedElement.classList.add('bg-primary', 'text-white');
        
        // Atualiza campo hidden
        document.getElementById('selectedIcon').value = iconName;
    }

    function setupColorPicker() {
        const colorPicker = document.querySelector('input[name="Cor"]');
        const colorText = document.querySelector('input[name="CorText"]');
        
        if (colorPicker && colorText) {
            colorPicker.addEventListener('change', function() {
                colorText.value = this.value;
            });
            
            colorText.addEventListener('change', function() {
                if (this.value.match(/^#[0-9A-Fa-f]{6}$/)) {
                    colorPicker.value = this.value;
                }
            });
        }
    }

    function setupIconSelection() {
        document.querySelectorAll('.icon-option').forEach(el => {
            el.style.cursor = 'pointer';
        });
    }

    function filterIcons() {
        const searchTerm = document.getElementById('iconSearch').value.toLowerCase();
        const iconOptions = document.querySelectorAll('.icon-option');
        
        iconOptions.forEach(option => {
            const searchData = option.getAttribute('data-search') || '';
            const shouldShow = searchData.includes(searchTerm) || searchTerm === '';
            
            option.parentElement.style.display = shouldShow ? 'block' : 'none';
        });
    }

    // Funções para operações CRUD
    async function saveCategoria(event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        
        const categoria = {
            Nome: formData.get('Nome'),
            Cor: formData.get('CorText'),
            Icone: formData.get('Icone')
        };
        
        try {
            const response = await fetch('/Categoria/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(categoria)
            });
            
            if (response.ok) {
                location.reload();
            } else {
                alert('Erro ao salvar categoria');
            }
        } catch (error) {
            alert('Erro ao salvar categoria');
        }
    }

    async function updateCategoria(event, id) {
        event.preventDefault();
        const formData = new FormData(event.target);
        
        const categoria = {
            Id: id,
            Nome: formData.get('Nome'),
            Cor: formData.get('CorText'),
            Icone: formData.get('Icone')
        };
        
        try {
            const response = await fetch(`/Categoria/Edit/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(categoria)
            });
            
            if (response.ok) {
                location.reload();
            } else {
                alert('Erro ao atualizar categoria');
            }
        } catch (error) {
            alert('Erro ao atualizar categoria');
        }
    }

    async function deleteCategoria(event, id) {
        event.preventDefault();
        
        try {
            const response = await fetch(`/Categoria/Delete/${id}`, {
                method: 'POST'
            });
            
            if (response.ok) {
                location.reload();
            } else {
                alert('Erro ao excluir categoria');
            }
        } catch (error) {
            alert('Erro ao excluir categoria');
        }
    }
</script>

<style>
    .cursor-pointer {
        cursor: pointer;
    }
    
    .icon-option {
        transition: all 0.2s ease;
        min-height: 70px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    
    .icon-option:hover {
        transform: scale(1.05);
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    }
    
    .icon-grid {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 1rem;
        background-color: #f8f9fa;
    }
    
    .icon-option.bg-primary {
        border-color: #0d6efd !important;
    }
    
    #iconSearch {
        border-radius: 0.375rem;
    }
    
    .icon-grid::-webkit-scrollbar {
        width: 6px;
    }
    
    .icon-grid::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }
    
    .icon-grid::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }
    
    .icon-grid::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
</style>